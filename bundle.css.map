{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Quiz.svelte",
    "../src/Question.svelte",
    "../src/Modal.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Quiz from \"./Quiz.svelte\";\n</script>\n\n<style>\n  :global(body) {\n    background: hsla(0, 0%, 0%, 0.8);\n  }\n  h1 {\n    color: white;\n    text-align: center;\n  }\n  div {\n    background: white;\n    border-radius: 15px;\n    padding: 40px;\n  }\n</style>\n\n<h1>Animal Quiz</h1>\n<div>\n  <Quiz />\n</div>\n",
    "<script>\n  import { fade, blur, fly, slide, scale } from \"svelte/transition\";\n  import { onMount, beforeUpdate, afterUpdate, onDestroy } from \"svelte\";\n  import Question from \"./Question.svelte\";\n  import Modal from \"./Modal.svelte\";\n  import { score } from \"./store.js\";\n  let activeQuestion = 0;\n  let quiz = getQuiz();\n  let isModalOpen = false;\n  onMount(() => {});\n\n  let pickAnswer = a => {\n    if (answer === correctAnswer) {\n      return (result = \"Correct!\");\n      result = \"Oops\";\n    }\n  };\n  async function getQuiz() {\n    const res = await fetch(\n      \"https://opentdb.com/api.php?amount=10&category=27&type=multiple\"\n    );\n    const quiz = await res.json();\n    return quiz;\n  }\n  function nextQuestion() {\n    activeQuestion = activeQuestion + 1;\n  }\n  function resetQuiz() {\n    isModalOpen = false;\n    activeQuestion = 0;\n    score.set(0);\n    quiz = getQuiz();\n  }\n\n  $: if ($score > 8) {\n    //TODO Switch to an animation\n    isModalOpen = true;\n  }\n  $: questionNumber = activeQuestion + 1;\n</script>\n\n<style>\n  h4 {\n    color: purple;\n  }\n  .fade-wrapper {\n    position: absolute;\n  }\n  .container {\n    min-height: 500px;\n  }\n</style>\n\n<div>\n  <h4>Score: {$score}</h4>\n  <h4>Question {questionNumber}</h4>\n  <button on:click={resetQuiz}>Start New Quiz</button>\n  <div class=\"container\">\n    {#await quiz}\n      loading\n    {:then data}\n      {#each data.results as question, index}\n        {#if index === activeQuestion}\n          <div in:fly={{ x: 200 }} out:fly={{ x: -200 }} class=\"fade-wrapper\">\n            <Question {question} {nextQuestion} />\n          </div>\n        {/if}\n      {/each}\n    {/await}\n  </div>\n</div>\n{#if isModalOpen}\n  <Modal on:close={resetQuiz}>\n    <h2>You Won</h2>\n    <p>Congratulations NERD!!!</p>\n    <button on:click={resetQuiz}>Start Over</button>\n  </Modal>\n{/if}\n",
    "<script>\n  import { score } from \"./store.js\";\n\n  export let question;\n  export let nextQuestion;\n  let isCorrect;\n  let isAnswered = false;\n  export let count = 0;\n  let correctAnswer = question.correct_answer;\n  let answers = question.incorrect_answers.map(answer => {\n    return {\n      answer,\n      correct: false\n    };\n  });\n  let allAnswers = [...answers, { answer: correctAnswer, correct: true }];\n\n  function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  shuffle(allAnswers);\n  function checkQuestion(ans) {\n    isAnswered = true;\n    isCorrect = ans;\n    if (ans) {\n      score.update(val => val + 1);\n    }\n    count++;\n  }\n</script>\n\n<style>\n  button {\n    height: 4em;\n    margin: 0.5rem;\n    padding: 0.5rem;\n  }\n  .isCorrect {\n    color: green;\n  }\n  .wrong {\n    color: red;\n  }\n  h5:after {\n    content: \"\\200b\";\n  }\n  .answer_continer {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    max-width: 500px;\n  }\n</style>\n\n<h3>\n  {@html question.question}\n</h3>\n<h5 class={isCorrect ? 'correct' : 'wrong'}>\n  {#if isAnswered}\n    {#if isCorrect}You got that one right{:else}WRONG!!!!{/if}\n  {/if}\n</h5>\n<div class=\"answer_continer\">\n  {#each allAnswers as answer}\n    <button\n      class:isCorrect={answer.correct && isAnswered}\n      on:click={() => checkQuestion(answer.correct)}>\n      {@html answer.answer}\n    </button>\n  {/each}\n  {#if isAnswered}\n    <div>\n      <button on:click={nextQuestion}>next</button>\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { fly, fade } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n  let w; //This will grab dom attribtues right from the client\n  const dispatch = createEventDispatcher();\n</script>\n\n<style lang=\"scss\">.modal-bg {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.6); }\n  .modal-bg .modal {\n    background: white;\n    padding: 20px;\n    border-radius: 15px; }\n\n/*# sourceMappingURL=Modal.svelte.css.map */</style>\n\n<div class=\"modal-bg\" tansition:fade bind:clientWidth={w}>\n  <div class=\"modal\" transition:fly={{ y: 200 }}>\n    <button\n      on:click={() => {\n        dispatch('close');\n      }}>\n      close\n    </button>\n    <slot />\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKU,IAAI,AAAE,CAAC,AACb,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AAClC,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,GAAG,eAAC,CAAC,AACH,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,AACf,CAAC;AC0BD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,MAAM,AACf,CAAC,AACD,aAAa,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,KAAK,AACnB,CAAC;AClBD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,MAAM,CACd,OAAO,CAAE,MAAM,AACjB,CAAC,AACD,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,KAAK,AACd,CAAC,AACD,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,iBAAE,MAAM,AAAC,CAAC,AACR,OAAO,CAAE,OAAO,AAClB,CAAC,AACD,gBAAgB,eAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,SAAS,CAAE,KAAK,AAClB,CAAC;AC3CgB,SAAS,cAAC,CAAC,AAC5B,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAAE,CAAC,AACjC,uBAAS,CAAC,MAAM,cAAC,CAAC,AAChB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC"
}